{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"About\r\n-----\r\nTinySound is a simple sound system that wraps the standard Java sound libraries.\r\nIt is \"tiny\" in that it is intended to have a small, easy-to-use interface with\r\neverything that you need to play sounds and music, and nothing that you don't.\r\n\r\nReleases\r\n--------\r\nIf you would just like to download the jar files, see the downloads page:      \r\nhttps://github.com/finnkuusisto/TinySound/downloads\r\n\r\nLicense\r\n-------\r\nTinySound is licensed under the BSD 2-Clause license.  A copy of the license can\r\nbe found in the header of every source file as well as in the LICENSE file\r\nincluded with the TinySound system.\r\n\r\nAudio Formats\r\n-------------\r\nTinySound stores all audio as 16-bit, 44.1kHz, 2-channel, linear PCM data\r\ninternally.  It makes an effort to convert other formats, but will not be able\r\nto handle all formats.  As for container formats, TinySound should be able to\r\nload any container types supported by your version of Java.  This should include\r\nWAV at the very least.\r\nTinySound can also load Ogg files containing audio in the Vorbis format with the\r\ninclusion of the libraries found in the lib directory.  If you intend to use Ogg\r\nVorbis files with TinySound just include the jorbis, tritonus_share and\r\nvorbisspi jar files on your CLASSPATH along with TinySound.\r\n\r\nJavadocs\r\n--------\r\nYou should only be concerned with the classes in the kuusisto.tinysound package.\r\nhttp://finnkuusisto.github.com/TinySound/doc\r\n\r\nUsing TinySound\r\n---------------\r\nThere are 3 classes that you need to know when using TinySound: TinySound, Music\r\nand Sound.  TinySound is the main system class, Music is an abstraction for\r\nmusic, and Sound is an abstraction for a sound effect.  Simple.\r\n\r\n####TinySound####\r\nThere are really only 2 steps you need to worry about with the TinySound class.\r\n1. Initialization\r\n2. Shutdown\r\n\r\n1. Initialization is accomplished via the init() function.  It takes no\r\narguments and sets up the system for you to play audio data.  TinySound creates\r\na daemon thread to automatically write audio data to the speakers.  For those\r\nwith special requirements and who are very familiar with the Java sound\r\nlibraries, there is an alternative init() function which allows selection of how\r\na line is opened to the speakers.  See the Javadocs for more detail.\r\n\r\n2. Shutdown is accomplished via the shutdown() function.  This shuts down the\r\nupdate thread and clears resources in use.\r\n\r\n####Music####\r\nYou load Music objects via the TinySound loadMusic() functions.  Music objects\r\ncan be started, stopped, paused, resumed, and looped from specified positions.\r\nIf you are done using a particular Music object, you can also unload its sound\r\ndata from the system via its unload() method.  See the Javadocs for more detail.\r\n\r\n####Sound####\r\nYou load Sound objects via the TinySound loadSound() functions.  Sound objects\r\nwork differently from Music objects as you can only play them (no pausing etc.).\r\nWhen a Sound is played it is queued to be played from the speakers once.  Of\r\ncourse, you can play a Sound multiple times in an overlapping fashion so it is\r\ngenerally useful for sound effects.  See the Javadocs for more detail.\r\n\r\nMemory Usage\r\n------------\r\nThe basic loading functions for Music and Sound objects produce implementations\r\nthat store all audio data in memory.  This is good for maintaining low latency,\r\nbut can also require a lot of heap space if you load many, or particularly long,\r\naudio resources.  There are loading functions available that allow you to\r\nrequest that the audio data be streamed from a file.  If this is requested, the\r\naudio data will first be converted as usual and then written to a temporary file\r\nfrom which it will be streamed.  This will dramatically reduce the overall\r\nmemory usage (after loading), but can potentially introduce occasional latency\r\nwhen reading from disk.\r\n\r\nExample\r\n-------\r\nThere is a very simple example provided in the example directory.  You'll need\r\nsound resources with the specified names on the classpath if you want to try the\r\nexample without modifying it.  Note that the example does not demonstrate all of\r\nTinySound's features.  See the Javadocs for more detail.","tagline":"Simple library for playing sounds and music in Java","name":"Tinysound"}